{"version":3,"sources":["components/card/Card.js","components/cardlist/CardList.js","components/searchbox/SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","Cardlist","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","componentDidMount","fetch","then","response","json","data","setState","e","searchField","target","value","state","this","filteredMonsters","filter","toLowerCase","includes","CardList","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAaeA,EAVF,SAAAC,GACT,OACI,sBAAKC,UAAU,gBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,6BAAKN,EAAMG,QAAQI,YCOhBC,EAVE,SAAAR,GACb,OACI,qBAAKC,UAAU,WAAf,SACKD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNtBO,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OAAQ,8BACJ,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,QCqCrEG,E,kDAnCb,aAAe,IAAD,8BACZ,gBAOFC,kBAAoB,WAGlBC,MAFU,8CAGPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEd,SAAUa,QAb9B,EAgBdT,aAAe,SAACW,GACd,EAAKD,SAAS,CAAEE,YAAaD,EAAEE,OAAOC,SAftC,EAAKC,MAAQ,CACXnB,SAAU,GACVgB,YAAa,IAJH,E,0CAoBd,WAEE,MAAkCI,KAAKD,MAA/BnB,EAAR,EAAQA,SAAUgB,EAAlB,EAAkBA,YACZK,EAAmBrB,EAASsB,QAAO,SAAA5B,GAAO,OAAIA,EAAQG,KAAK0B,cAAcC,SAASR,EAAYO,kBAEpG,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAa,kBAAmBC,aAAcgB,KAAKhB,eAC9D,cAACqB,EAAD,CAAUzB,SAAUqB,W,GA/BVK,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.aeb109fb.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Card.style.css\";\r\n\r\nconst Card = props => {\r\n    return (\r\n        <div className=\"cardContainer\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\r\n            <h2>{props.monster.name}</h2>\r\n            <h4>{props.monster.email}</h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport \"./CardList.style.css\";\r\nimport Card from \"../card/Card.js\";\r\n\r\n\r\nconst Cardlist = props => {\r\n    return (\r\n        <div className=\"cardList\">\r\n            {props.monsters.map(monster => (\r\n                <Card key={monster.id} monster={monster} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;\r\n","import React from \"react\";\r\nimport \"./SearchBox.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n    return (<div>\r\n        <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n    </div>);\r\n}","import './App.css';\nimport React from \"react\";\nimport CardList from './components/cardlist/CardList';\nimport { SearchBox } from './components/searchbox/SearchBox';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    }\n  }\n\n  componentDidMount = () => {\n    let url = \"https://jsonplaceholder.typicode.com/users\";\n\n    fetch(url)\n      .then(response => response.json())\n      .then(data => this.setState({ monsters: data }))\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>MONSTERS ROLODEX</h1>\n        <SearchBox placeholder={\"search monsters\"} handleChange={this.handleChange} />\n        <CardList monsters={filteredMonsters} />\n      </div >\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}